{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar log1p = require( '@stdlib/math-base-special-log1p' );\nvar abs2 = require( '@stdlib/math-base-special-abs2' );\nvar erfc = require( '@stdlib/math-base-special-erfc' );\nvar erfcx = require( '@stdlib/math-base-special-erfcx' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// VARIABLES //\n\nvar INV_SQRT_TWO = 0.7071067811865475; // 1/sqrt(2)\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {number} logarithm of cumulative distribution function\n*\n* @example\n* var y = logcdf( 2.0, 0.0, 1.0 );\n* // returns ~-0.023\n*\n* @example\n* var y = logcdf( -1.0, 4.0, 2.0 );\n* // returns ~-5.082\n*\n* @example\n* var y = logcdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative standard deviation:\n* var y = logcdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 8.0, 0.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( 8.0, 8.0, 0.0 );\n* // returns 0.0\n*/\nfunction logcdf( x, mu, sigma ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn (x < mu) ? NINF : 0.0;\n\t}\n\tz = ( x - mu ) / sigma;\n\tif ( z < -1.0 ) {\n\t\treturn ln( erfcx( -z * INV_SQRT_TWO ) / 2.0 ) - ( abs2(z) / 2.0 );\n\t}\n\t// Case: z >= -1.0:\n\treturn log1p( -erfc( z * INV_SQRT_TWO ) / 2.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = logcdf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar degenerate = require( '@stdlib/stats-base-dists-degenerate-logcdf' ).factory;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar log1p = require( '@stdlib/math-base-special-log1p' );\nvar abs2 = require( '@stdlib/math-base-special-abs2' );\nvar erfc = require( '@stdlib/math-base-special-erfc' );\nvar erfcx = require( '@stdlib/math-base-special-erfcx' );\nvar ln = require( '@stdlib/math-base-special-ln' );\n\n\n// VARIABLES //\n\nvar INV_SQRT_TWO = 0.7071067811865475; // 1/sqrt(2)\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a normal distribution.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Function} logcdf\n*\n* @example\n* var logcdf = factory( 10.0, 2.0 );\n* var y = logcdf( 10.0 );\n* // returns ~-0.693\n*\n* y = logcdf( 5.0 );\n* // returns ~-5.082\n*/\nfunction factory( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a normal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logcdf\n\t*\n\t* @example\n\t* var y = logcdf( -3.14 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tvar z = ( x - mu ) / sigma;\n\t\tif ( z < -1.0 ) {\n\t\t\treturn ln( erfcx( -z * INV_SQRT_TWO ) / 2.0 ) - ( abs2(z) / 2.0 );\n\t\t}\n\t\t// Case: z >= -1.0:\n\t\treturn log1p( -erfc( z * INV_SQRT_TWO ) / 2.0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the cumulative distribution function (CDF) for a normal distribution.\n*\n* @module @stdlib/stats-base-dists-normal-logcdf\n*\n* @example\n* var logcdf = require( '@stdlib/stats-base-dists-normal-logcdf' );\n*\n* var y = logcdf( 2.0, 0.0, 1.0 );\n* // returns ~-0.023\n*\n* var mylogcdf = logcdf.factory( 10.0, 2.0 );\n* y = mylogcdf( 10.0 );\n* // returns ~-0.693\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAK,QAAS,8BAA+B,EAC7CC,EAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,gCAAiC,EACjDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EACjDC,EAAQ,QAAS,iCAAkC,EAKnDC,EAAe,kBA8CnB,SAASC,EAAQC,EAAGC,EAAIC,EAAQ,CAC/B,IAAIC,EACJ,OACCN,EAAOG,CAAE,GACTH,EAAOI,CAAG,GACVJ,EAAOK,CAAM,GACbA,EAAQ,EAED,IAEHA,IAAU,EACNF,EAAIC,EAAML,EAAO,GAE1BO,GAAMH,EAAIC,GAAOC,EACZC,EAAI,GACDZ,EAAII,EAAO,CAACQ,EAAIL,CAAa,EAAI,CAAI,EAAML,EAAKU,CAAC,EAAI,EAGtDX,EAAO,CAACE,EAAMS,EAAIL,CAAa,EAAI,CAAI,EAC/C,CAKAR,EAAO,QAAUS,ICvGjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,iCAAkC,EAC9DC,EAAa,QAAS,4CAA6C,EAAE,QACrEC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,gCAAiC,EACjDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAK,QAAS,8BAA+B,EAK7CC,EAAe,kBAoBnB,SAASC,EAASC,EAAIC,EAAQ,CAC7B,GACCT,EAAOQ,CAAG,GACVR,EAAOS,CAAM,GACbA,EAAQ,EAER,OAAOX,EAAkB,GAAI,EAE9B,GAAKW,IAAU,EACd,OAAOV,EAAYS,CAAG,EAGvB,OAAOE,EAaP,SAASA,EAAQC,EAAI,CACpB,IAAIC,GAAMD,EAAIH,GAAOC,EACrB,OAAKG,EAAI,GACDP,EAAID,EAAO,CAACQ,EAAIN,CAAa,EAAI,CAAI,EAAMJ,EAAKU,CAAC,EAAI,EAGtDX,EAAO,CAACE,EAAMS,EAAIN,CAAa,EAAI,CAAI,CAC/C,CACD,CAKAT,EAAO,QAAUU,ICtDjB,IAAIM,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_main", "__commonJSMin", "exports", "module", "ln", "log1p", "abs2", "erfc", "erfcx", "NINF", "isnan", "INV_SQRT_TWO", "logcdf", "x", "mu", "sigma", "z", "require_factory", "__commonJSMin", "exports", "module", "constantFunction", "degenerate", "isnan", "log1p", "abs2", "erfc", "erfcx", "ln", "INV_SQRT_TWO", "factory", "mu", "sigma", "logcdf", "x", "z", "setReadOnly", "main", "factory"]
}
